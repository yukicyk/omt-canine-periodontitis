observed effect size. A power of 0.8 or higher is generally considered good.
For example, a power of 0.99 for a comparison means that we had a 99% chance of
detecting a significant difference between the groups, which gives us high
confidence in the PERMANOVA result for that test.
\n")
print("---------------------------------------------------")
print("Preparing data for Genus-level analysis...")
# Step 5.1: Agglomerate taxa to the Genus level using tax_glom.
ps_genus <- tax_glom(ps, taxrank = "Genus", NArm = TRUE)
#QC CHECK - Evaluate the effect of removing unclassified taxa.
print("--- QC Check: Evaluating abundance loss from tax_glom(NArm=TRUE) ---")
# Calculate sums before and after agglomeration
sums_before <- sample_sums(ps)
sums_after <- sample_sums(ps_genus)
# Combine into a data frame for comparison
qc_df <- data.frame(
SampleID = names(sums_before),
Abundance_Before = sums_before,
Abundance_After = sums_after[names(sums_before)] # Ensure correct sample matching
) %>%
mutate(Percent_Retained = (Abundance_After / Abundance_Before) * 100)
# Calculate average retention
average_retention <- mean(qc_df$Percent_Retained)
# Print results and recommendations
print("Percentage of abundance retained per sample after removing taxa unclassified at Genus level:")
print(qc_df %>% select(SampleID, Percent_Retained) %>% arrange(Percent_Retained))
print(sprintf("Average abundance retained across all samples: %.2f%%.", average_retention))
if (average_retention > 90) {
print("QC PASSED: Average retention is high (>90%). It is safe to proceed.")
} else {
print("QC WARNING: Average retention is low (<90%). A significant portion of abundance is from taxa unclassified at the Genus level.")
print("RECOMMENDATION: Consider re-running with tax_glom(..., NArm = FALSE) to keep these taxa, or revisit the taxonomic classification pipeline to improve assignments.")
}
print("--------------------------------------------------------------------")
# Step 5.2: Extract the Genus-level abundance table(samples x taxa).
genus_abun <- as.data.frame(otu_table(transform_sample_counts(ps_genus, function(x) x / sum(x))))
# Step 5.3: Create a mapping to get clean, unique Genus names for column headers.
tax_key <- as.data.frame(tax_table(ps_genus)) %>%
tibble::rownames_to_column("ASV_ID") %>%
mutate(Genus_Name = ifelse(is.na(Genus) | Genus == "", paste0("Unassigned_Genus_", ASV_ID), as.character(Genus))) %>%
mutate(Genus_Name_Unique = make.names(Genus_Name, unique = TRUE))
# Step 5.4: Replace the ASV_ID column names with the clean Genus names.
current_colnames <- colnames(genus_abun)
new_colnames <- tax_key$Genus_Name_Unique[match(current_colnames, tax_key$ASV_ID)]
colnames(genus_abun) <- new_colnames
# Step 5.5: Move the sample names from rownames to a column for joining.
genus_abun_wide <- genus_abun %>%
tibble::rownames_to_column("SampleID")
# Step 5.6: Create the final, clean Genus-level analysis data frame.
analysis_df_genus <- meta %>%
inner_join(clinical_data, by = "SampleID") %>%
inner_join(genus_abun_wide, by = "SampleID")
# Check the resultant dataframe before proceeding
# Check is the rows are samples, columns are genera, content is the relative abundance of genus in a given sample.
head(analysis_df_genus)
print("Performing Genus-level correlation analysis with FDR correction...")
# Select the clinical variables and the new genus columns for correlation.
corr_matrix_input_genus <- analysis_df_genus %>%
select(PPD_mean, BOP_pc, plaque_pc, all_of(new_colnames))
corr_results_genus <- rcorr(as.matrix(corr_matrix_input_genus), type = "pearson")
# Function to flatten the rcorr object
flatten_rcorr <- function(rcorr_obj) {
r <- rcorr_obj$r %>% as.data.frame() %>% tibble::rownames_to_column("var1") %>% gather(var2, r, -var1)
p <- rcorr_obj$P %>% as.data.frame() %>% tibble::rownames_to_column("var1") %>% gather(var2, p, -var1)
left_join(r, p, by = c("var1", "var2"))
}
corr_table_genus <- flatten_rcorr(corr_results_genus)
# Filter for significant correlations, APPLYING FDR CORRECTION
significant_correlations_genus <- corr_table_genus %>%
filter(var1 %in% c("PPD_mean", "BOP_pc", "plaque_pc") & var2 %in% new_colnames) %>%
# Correct for multiple testing using Benjamini-Hochberg (FDR)
mutate(p_adj = p.adjust(p, method = "fdr")) %>%
filter(p_adj < 0.05) %>%
# Optional: filter for stronger correlations
filter(abs(r) > 0.3)
# Create a heatmap of significant correlations
if (nrow(significant_correlations_genus) > 0) {
heatmap_data <- significant_correlations_genus %>%
select(var1, var2, r) %>% # var1:clinical meta, var2: Genus
pivot_wider(names_from = var1, values_from = r, values_fill = 0) %>%
tibble::column_to_rownames("var2") #r-values stored
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = FALSE,
display_numbers = TRUE,
fontsize_number = 8,
labels_col = c("mean PPD", "BOP %", "Plaque %"),
angle_col = ("0"),
main = "Significant Pearson Correlations (FDR < 0.05)\nGenus vs. Clinical Parameters",
filename = file.path(fig_path, "correlation_heatmap_fdr.png")
)
write.csv(significant_correlations, file.path(table_path, "significant_clinical_correlations_fdr.csv"))
} else {
print("No significant correlations found after FDR correction.")
}
write.csv(significant_correlations_genus, file.path(table_path, "significant_clinical_correlations_fdr.csv"))
# Create a heatmap of significant correlations
if (nrow(significant_correlations_genus) > 0) {
heatmap_data <- significant_correlations_genus %>%
select(var1, var2, r) %>% # var1:clinical meta, var2: Genus
pivot_wider(names_from = var1, values_from = r, values_fill = 0) %>%
tibble::column_to_rownames("var2") #r-values stored
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = FALSE,
display_numbers = TRUE,
fontsize_number = 8,
labels_col = c("mean PPD", "BOP %", "Plaque %"),
angle_col = ("0"),
main = "Significant Pearson Correlations (FDR < 0.05)\nGenus vs. Clinical Parameters",
filename = file.path(fig_path, "correlation_heatmap_fdr.png")
)
write.csv(significant_correlations_genus, file.path(table_path, "significant_clinical_correlations_fdr.csv"))
} else {
print("No significant correlations found after FDR correction.")
}
# Plot rarefaction curves for all samples
# Accessing sampling depth and coverage
p.rare <- ggrare(ps, step = 1000, color = "Treatment",label="Sample", se = FALSE)
pacman::p_load(phyloseq, ggplot2, vegan, dplyr, rstatix, ggpubr, devtools, ranacapa)
# Plot rarefaction curves for all samples
# Accessing sampling depth and coverage
p.rare <- ggrare(ps, step = 1000, color = "Treatment",label="Sample", se = FALSE)
p.rare + xlim(0, 25000)
p.all <- p.rare + facet_wrap(~Treatment)+ xlim(0, 25000)
ggsave(file.path(fig_path, "Rarefaction curves.png"), p.all, width = 10, height = 8)
# For reproducibility, rarefy to an even depth before alpha diversity calculation.
# The sample.size should be chosen based on the minimum library size of the dataset.
# Rarefied dataset is only used for alpha-diversity estimation.
# Check min library size
print(min(sample_sums(ps)))
ps.rf <- rarefy_even_depth(ps, sample.size = min(sample_sums(ps)), rngseed = 123, replace = FALSE)
# Define the colors used in the paper
treatment_colors <- c("Control" = "darkcyan", "Test" = "chartreuse2", "Donor" = "coral1")
# Plot alpha diversity (Shannon and Observed ASVs) comparing treatments at each timepoint
alpha_plot <- plot_richness(ps.rf, x = "Timepoint", measures = c("Shannon")) +
geom_boxplot(aes(fill = Treatment), alpha = 0.7, show.legend = FALSE) +
geom_point(show.legend = FALSE) +
theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Alpha Diversity by Treatment at Each Timepoint")
ggsave(file.path(fig_path, "alpha_diversity_by_timepoint.png"), alpha_plot, width = 10, height = 8)
# Plot alpha diversity (Shannon and Observed ASVs) comparing treatments at each timepoint
alpha_plot <- plot_richness(ps.rf, x = "Timepoint", measures = c("Shannon")) +
geom_boxplot(aes(fill = Treatment), alpha = 0.7, show.legend = TRUE) +
geom_point(show.legend = FALSE) +
theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Alpha Diversity by Treatment at Each Timepoint")
ggsave(file.path(fig_path, "alpha_diversity_by_timepoint.png"), alpha_plot, width = 10, height = 8)
# Plot alpha diversity change over time, faceted by treatment
alpha_time_plot <- plot_richness(ps.rf, x = "Week", measures = "Shannon", color = "Dog") +
geom_point(size = 4, alpha = 0.8) +
geom_line(aes(group = Dog), alpha = 0.5) +
facet_wrap(~Treatment) +
theme_bw(base_size = 14) +
labs(title = "Shannon Diversity Trajectory Over Time", x = "Week", y = "Shannon Index")
ggsave(file.path(fig_path, "alpha_diversity_trajectory.png"), alpha_time_plot, width = 12, height = 6)
??ggrare
# Extract sample data
sample_df <- as(sample_data(ps), "data.frame")
View(sample_df)
View(sample_df)
View(sample_df)
# Create the new numeric week column
sample_df <- sample_df %>%
mutate(
WeekNumeric = case_when(
Week == "0"  ~ -2,
Week == "2" ~ 0,
Week == "4"   ~ 2,
Week == "14"  ~ 12,
TRUE               ~ NA_real_ # Fallback for any unexpected values
)
)
View(sample_df)
# Create the new numeric week column
sample_df <- sample_df %>%
mutate(
WeekNumeric = case_when(
Week == "week -2"  ~ -2,
Week == "baseline" ~ 0,
Week == "week 2"   ~ 2,
Week == "week 12"  ~ 12,
TRUE               ~ NA_real_ # Fallback for any unexpected values
)
)
View(sample_df)
# Create the new numeric week column
sample_df <- sample_df %>%
mutate(
WeekNumeric = case_when(
Week == 0  ~ -2,
Week == 2 ~ 0,
Week == 4   ~ 2,
Week == 14  ~ 12,
TRUE               ~ NA_real_ # Fallback for any unexpected values
)
)
View(sample_df)
sample_data(ps.ra) <- sample_df
View(ps.ra)
# Create a combined subset for Control and Recipient groups
# This allows for a single ordination space for better comparison
rc.ra <- subset_samples(ps.ra, Treatment %in% c("Control", "Recipient")) %>%
prune_taxa(taxa_sums(.) > 0, .)
# Calculate Bray-Curtis dissimilarity and perform MDS ordination on the combined data
mds_rc <- ordinate(rc.ra, "MDS", "bray")
# Create the base ggplot object, faceted by Treatment
p_rc <- plot_ordination(rc.ra, mds_rc, "samples", color = "Dog", shape = "Treatment") +
geom_point(size = 6, alpha = 0.7) +
theme_bw(base_size = 16) +
facet_wrap(~Treatment) +
labs(
x = "MDS Axis 1",
y = "MDS Axis 2",
title = 'Microbiome Trajectory (Weeks: {frame_along})',
subtitle = 'Bray-Curtis Dissimilarity',
color = "Dog ID"
) +
# Add text labels for each dog for clarity
geom_text(aes(label = Dog), vjust = -1.5, size = 4, show.legend = FALSE)
# Add the gganimate layers to the plot
# `transition_reveal(Week)` animates the plot along the 'Week' variable.
# `shadow_wake` leaves a trail of past points.
anim_rc <- p_rc +
transition_reveal(WeekNumeric) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out') # Smooths the transition
pacman::p_load(phyloseq, ggplot2, dplyr, gganimate, magick)
# Add the gganimate layers to the plot
# `transition_reveal(Week)` animates the plot along the 'Week' variable.
# `shadow_wake` leaves a trail of past points.
anim_rc <- p_rc +
transition_reveal(WeekNumeric) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out') # Smooths the transition
# Render the animation as a high-quality GIF file.
# magick_renderer is used instead of the default gifski
# The duration, fps, and resolution can be adjusted.
print("Rendering animation for Control and Recipient groups...")
animate(
anim_rc,
nframes = 150, # More frames for a smoother animation
fps = 10,
duration = 15,
width = 1200,
height = 700,
renderer = magick_renderer(file.path(fig_path, "community_trajectory_animated.gif"))
)
animate(
anim_rc,
nframes = 150, # More frames for a smoother animation
fps = 10,
duration = 15,
width = 1200,
height = 700,
renderer = magick_renderer(file.path(fig_path, "community_trajectory_animated.gif"))
)
animate(anim_rc, renderer=magick_renderer())
# Create the base ggplot object, faceted by Treatment
p_rc <- plot_ordination(rc.ra, mds_rc, "samples", color = "Dog") +
geom_point(size = 6, alpha = 0.7) +
theme_bw(base_size = 16) +
facet_wrap(~Treatment) +
labs(
x = "MDS Axis 1",
y = "MDS Axis 2",
title = 'Microbiome Trajectory (Weeks: {frame_along})',
subtitle = 'Bray-Curtis Dissimilarity',
color = "Dog ID"
) +
# Add text labels for each dog for clarity
geom_text(aes(label = Dog), vjust = -1.5, size = 4, show.legend = FALSE)
# Add the gganimate layers to the plot
# `transition_reveal(Week)` animates the plot along the 'Week' variable.
# `shadow_wake` leaves a trail of past points.
anim_rc <- p_rc +
transition_reveal(WeekNumeric) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out') # Smooths the transition
animate(
anim_rc,
#nframes = 150, # More frames for a smoother animation
#fps = 10,
#duration = 15,
#width = 1200,
#height = 700,
renderer = magick_renderer(file.path(fig_path, "community_trajectory_animated.gif"))
)
magick_config()
??magick_renderer
animate(
anim_rc,
nframes = 150, # More frames for a smoother animation
fps = 10,
duration = 15,
width = 1200,
height = 700,
renderer = magick_renderer())
# Include the donor in the same ordination space and see how the control and test samples move around
# Create a single data frame with ordination scores and metadata
# This makes plotting with ggplot2 more explicit and flexible.
mds_all <- ordinate(ps.ra, "MDS", "bray")
plot_data <- plot_ordination(ps.ra, msd_all, justDF = TRUE) %>%
bind_cols(as(sample_data(ps.ra), "data.frame"))
plot_data <- plot_ordination(ps.ra, msd_all) %>%
bind_cols(as(sample_data(ps.ra), "data.frame"))
View(mds_all)
plot_data <- plot_ordination(ps.ra, mds_all , justDF = TRUE) %>%
bind_cols(as(sample_data(ps.ra), "data.frame"))
# Separate data for the animated points (Control/Recipient) and static points (Donor)
animated_data <- plot_data %>% filter(Treatment %in% c("Control", "Recipient"))
View(plot_data)
# Separate data for the animated points (Control/Recipient) and static points (Donor)
animated_data <- plot_data %>% filter(Treatment...5 %in% c("Control", "Recipient"))
static_data <- plot_data %>% filter(Treatment...5 == "Donor")
View(static_data)
View(static_data)
# --- Create Static Plot (Base for Animation) ---
# Create the base ggplot object without faceting.
# We will use 'shape' to distinguish between Treatment groups.
p_unified <- ggplot(animated_data, aes(x = Axis.1, y = Axis.2, color = Dog)) +
# Add the static Donor points as a fixed background layer.
# They are larger and have a different shape to stand out.
geom_point(
data = static_data,
aes(shape = Treatment...5), # Map shape to Treatment
size = 8,
alpha = 0.8,
color = "black" # Make donors a distinct, constant color
) +
# Add the points for Control and Recipient that will be animated.
geom_point(aes(shape = Treatment...5), size = 6, alpha = 0.7) +
theme_bw(base_size = 16) +
labs(
x = "MDS Axis 1",
y = "MDS Axis 2",
title = 'Microbiome Trajectory (Weeks: {frame_along})',
subtitle = 'Bray-Curtis Dissimilarity | All Groups in One Space',
color = "Dog ID",
shape = "Group"
) +
# Manually define shapes for clarity
scale_shape_manual(values = c("Control" = 16, "Recipient" = 17, "Donor" = 18)) +
# Add text labels for each dog
geom_text(aes(label = Dog), vjust = -1.5, size = 4, show.legend = FALSE)
# Add the gganimate layers to the plot
anim_unified <- p_unified +
transition_reveal(WeekNumeric) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out')
print("Rendering unified animation for all groups...")
animate(
anim_unified,
nframes = 150,
fps = 10,
duration = 15,
width = 1200,
height = 800, # Increased height slightly for the single plot
renderer = magick_renderer(),
device = "ragg_png" # Use a high-quality rendering device
)
animate(anim_unified,renderer = magick_renderer())
View(p_unified)
p_unified
View(animated_data)
# --- Create Static Plot (Base for Animation) ---
# Create the base ggplot object without faceting.
# We will use 'shape' to distinguish between Treatment groups.
p_unified <- ggplot(animated_data, aes(x = Axis.1, y = Axis.2, color = Dog...3)) +
# Add the static Donor points as a fixed background layer.
# They are larger and have a different shape to stand out.
geom_point(
data = static_data,
aes(shape = Treatment...5), # Map shape to Treatment
size = 8,
alpha = 0.8,
color = "black" # Make donors a distinct, constant color
) +
# Add the points for Control and Recipient that will be animated.
geom_point(aes(shape = Treatment...5), size = 6, alpha = 0.7) +
theme_bw(base_size = 16) +
labs(
x = "MDS Axis 1",
y = "MDS Axis 2",
title = 'Microbiome Trajectory (Weeks: {frame_along})',
subtitle = 'Bray-Curtis Dissimilarity | All Groups in One Space',
color = "Dog ID",
shape = "Group"
) +
# Manually define shapes for clarity
scale_shape_manual(values = c("Control" = 16, "Recipient" = 17, "Donor" = 18)) +
# Add text labels for each dog
geom_text(aes(label = Dog), vjust = -1.5, size = 4, show.legend = FALSE)
# --- Create Static Plot (Base for Animation) ---
# Create the base ggplot object without faceting.
# We will use 'shape' to distinguish between Treatment groups.
p_unified <- ggplot(animated_data, aes(x = Axis.1, y = Axis.2, color = Dog...3)) +
# Add the static Donor points as a fixed background layer.
# They are larger and have a different shape to stand out.
geom_point(
data = static_data,
aes(shape = Treatment...5), # Map shape to Treatment
size = 8,
alpha = 0.8,
color = "black" # Make donors a distinct, constant color
) +
# Add the points for Control and Recipient that will be animated.
geom_point(aes(shape = Treatment...5), size = 6, alpha = 0.7) +
theme_bw(base_size = 16) +
labs(
x = "MDS Axis 1",
y = "MDS Axis 2",
title = 'Microbiome Trajectory (Weeks: {frame_along})',
subtitle = 'Bray-Curtis Dissimilarity | All Groups in One Space',
color = "Dog ID",
shape = "Group"
) +
# Manually define shapes for clarity
scale_shape_manual(values = c("Control" = 16, "Recipient" = 17, "Donor" = 18)) +
# Add text labels for each dog
geom_text(aes(label = Dog...3), vjust = -1.5, size = 4, show.legend = FALSE)
# Add the gganimate layers to the plot
anim_unified <- p_unified +
transition_reveal(WeekNumeric) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out')
print("Rendering unified animation for all groups...")
animate(
anim_unified,
nframes = 150,
fps = 10,
duration = 15,
width = 1200,
height = 800, # Increased height slightly for the single plot
renderer = magick_renderer(),
device = "ragg_png" # Use a high-quality rendering device
)
View(p_unified)
p_unified
View(p_unified)
View(p_unified)
# Add the gganimate layers to the plot
anim_unified <- p_unified +
transition_reveal(WeekNumeric...12) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out')
print("Rendering unified animation for all groups...")
animate(
anim_unified,
nframes = 150,
fps = 10,
duration = 15,
width = 1200,
height = 800, # Increased height slightly for the single plot
renderer = magick_renderer(),
device = "ragg_png" # Use a high-quality rendering device
)
View(animated_data)
View(static_data)
# --- Create Static Plot (Base for Animation) ---
# Create the base ggplot object without faceting.
# We will use 'shape' to distinguish between Treatment groups.
p_unified <- ggplot(animated_data, aes(x = Axis.1, y = Axis.2, color = Dog...3)) +
# Add the static Donor points as a fixed background layer.
# They are larger and have a different shape to stand out.
geom_point(
data = static_data,
aes(shape = Treatment...5), # Map shape to Treatment
size = 8,
alpha = 0.8,
color = "royalblue4" # Make donors a distinct, constant color
) +
# Add the points for Control and Recipient that will be animated.
geom_point(aes(shape = Treatment...5), size = 6, alpha = 0.7) +
theme_bw(base_size = 16) +
labs(
x = "MDS Axis 1",
y = "MDS Axis 2",
title = 'Microbiome Trajectory (Weeks: {frame_along})',
subtitle = 'Bray-Curtis Dissimilarity | All Groups in One Space',
color = "Dog ID",
shape = "Group"
) +
# Manually define shapes for clarity
scale_shape_manual(values = c("Control" = 16, "Recipient" = 17, "Donor" = 18)) +
# Add text labels for each dog
geom_text(aes(label = Dog...3), vjust = -1.5, size = 4, show.legend = FALSE)
# Add the gganimate layers to the plot
anim_unified <- p_unified +
transition_reveal(WeekNumeric...12) +
shadow_wake(wake_length = 0.1, alpha = 0.5) +
ease_aes('cubic-in-out')
print("Rendering unified animation for all groups...")
animate(
anim_unified,
nframes = 150,
fps = 10,
duration = 15,
width = 1200,
height = 800, # Increased height slightly for the single plot
renderer = magick_renderer(),
device = "ragg_png" # Use a high-quality rendering device
)
# Save the animation
anim_save(
filename = file.path(fig_path, "community_trajectory_unified_animated.gif")
)
print(paste("Unified animation saved to:", file.path(fig_path, "community_trajectory_unified_animated.gif")))
